% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cac.R
\name{cac}
\alias{cac}
\title{Cox-assisted clustering}
\usage{
cac(x, y, d, k, hazRestrict = c("none", "proportional", "identical"),
  maxiter = 5000, eps = 1e-08, trace = FALSE, uStart = NULL,
  uStartMethod = c("subset", "random"),
  uRandomControl = getURandomControl(),
  uSubsetControl = getUSubsetControl(), keepLocal = TRUE,
  fixedBeta = NULL, fixedPi = NULL)
}
\arguments{
\item{x}{Covariate matrix.}

\item{y}{Response variable. The follow-up time of each observation.}

\item{d}{Censoring indicator for each observation. One to indicate failure
and zero to indicate censoring.}

\item{k}{Integer. Number of classes in the mixture model.}

\item{hazRestrict}{Type of restriction on the baseline hazard functions.
"none" allows a different nonparametric estimate of the baseline hazard in each class.
"proprotional" restricts the functions to be proportional, and "identical" restricts
them to be the same.}

\item{maxiter}{Maximum number of EM algorithm iterations.}

\item{eps}{Convergence threshold. The algorithm terminates when the relative
change in the semiparametric log-likelihood between successive iterations
drops below \code{eps}.}

\item{trace}{Logical. If \code{TRUE}, EM algorithm progress is printed to the terminal.}

\item{uStart}{An optional list of starting weight values. Each component of the list
should be an \eqn{n \times k} matrix, where \eqn{n} is the  number of observations
and \eqn{k} is the number of classes. Weights should be between zero and one, and
each row should sum to one.}

\item{uStartMethod}{Only used if \code{uStart = NULL}. This argument indicates
the method for generating random starting values for the EM algorithm.
The "subset" method initializes the coefficients by fitting a
Cox model to randomly selected subsets. The mixture probabilities are initialized
to be equal, and the baseline hazard functions are each initialized to be the
Nelson-Aalen estimate from the full-data. Parameters for this method are passed
to the \code{uSubsetControl} argument. The "random" method randomly selects
one class to have most of the weight for each observation. The remaining weight
is equally divided among the remaining observation. Parameters for this method
are passed to the \code{uRandomControl} argument.}

\item{uRandomControl}{A list of arguments used if \code{uStart = NULL} and
\code{uStartMethod = "random"}. Includes the number of random starts and the
amount of weight to be placed in the majority class for each observation.
This argument should be constructed with the \code{uRandomControl} function.}

\item{uSubsetControl}{A list of arguments used if \code{uStart = NULL} and
\code{uStartMethod = "subset"}. Includes the number of random starts, the number
of observations in each starting subset, and the maximum number of tries before
resorting to the "random" start method.
This argument should be constructed with the \code{uSubsetControl} function.}

\item{keepLocal}{Logical. If TRUE, the returned 'cacFit' object will include
a list of fitted models called 'localFits'. Each fit corresponds to a different
set of starting values.}

\item{fixedBeta}{Either NULL or a matrix of dimension p x k.
If not NULL, the observed semiparametric likelihood is
optimized holding beta fixed. Mostly intended to be used by the \code{cacProfileInfo}
function, but this functionality is also provided for the user.}

\item{fixedPi}{Either NULL or a vector of k probabilities summing to one.
If not NULL, the observed semiparametric likelihood is
optimized holding pi fixed. Mostly intended to be used by the \code{cacProfileInfo}
function, but this functionality is also provided for the user.}
}
\value{
S3 object of class 'cacFit', which contains information about the best
solution found among all sets of starting values. Also contains information about
the local optima found by the different sets of starting values. Note that observations
are sorted by failure time before optimization, so \code{uHat}, \code{hHat},
and \code{HHat} may correspond to their order in the \code{x}, \code{y}, and \code{d}
arguments. The returned \code{arglist} contains \code{x}, \code{y}, and \code{d}
in sorted order. The 'cacFit' object consists of the following.
\describe{
  \item{conv}{Logical indicator for whether the algorithm converged within the
  iteration limit for the best model fit.}
  \item{iter}{Number of iterations for the best model fit.}
  \item{betaHat}{Matrix of coefficient estimates.}
  \item{piHat}{Vector of mixture probability estimates.}
  \item{uHat}{Matrix of posterior class probabilities for each observation time.}
  \item{hHat}{Matrix containing the nonparametric baseline hazard estimate for
  each observation. This is an \eqn{n \times k} matrix, and it will contain zeros
  for observations that are censored.}
  \item{HHat}{Matrix containing the cumulative hazard estimate at each observation
  time. This is an \eqn{n \times k} matrix.}
  \item{arglist}{List of arguments passed to the \code{cac} function call.}
  \item{bestLocalIndex}{Index number of the best fit within the list of \code{uStart}
  values. Note that if starting values were generated randomly, then the list
  of random starting weights will be returned in \code{arglist$uStart}.}
  \item{loglikLocal}{Vector of semiparametric log-likelihood values for each set
  of starting values.}
  \item{localFits}{Only returned if \code{keepLocal = TRUE}. A list of parameter
  values for each set of starting values.}
}
}
\description{
Fits a Cox-assisted clustering (CAC) model.
}
